// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wJBuokoAWXvJUSMjHC6YFU
// Component: sNykR_isg886
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantswBhI3X1PeEo3R } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: wBhI3x1PeEo3R/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_blank_project_mobile_first.module.css"; // plasmic-import: wJBuokoAWXvJUSMjHC6YFU/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: sNykR_isg886/css
import EnvelopeFillIcon from "./icons/PlasmicIcon__EnvelopeFill"; // plasmic-import: JlMwdm45Xb/icon
import LIconIcon from "./icons/PlasmicIcon__LIcon"; // plasmic-import: Jfxsm2ORK1/icon

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswBhI3X1PeEo3R()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          {(
            hasVariant(globalVariants, "screen", "desktopOnly") ? true : false
          ) ? (
            <div
              data-plasmic-name={"profiles"}
              data-plasmic-override={overrides.profiles}
              className={classNames(projectcss.all, sty.profiles)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ieX9C
                )}
              >
                {"Profiles & Messages"}
              </div>

              <div
                data-plasmic-name={"rectangle39509"}
                data-plasmic-override={overrides.rectangle39509}
                className={classNames(projectcss.all, sty.rectangle39509)}
              />

              <div
                data-plasmic-name={"rectangle39513"}
                data-plasmic-override={overrides.rectangle39513}
                className={classNames(projectcss.all, sty.rectangle39513)}
              />

              <div
                data-plasmic-name={"rectangle39512"}
                data-plasmic-override={overrides.rectangle39512}
                className={classNames(projectcss.all, sty.rectangle39512)}
              />

              <div
                data-plasmic-name={"maskGroup"}
                data-plasmic-override={overrides.maskGroup}
                className={classNames(projectcss.all, sty.maskGroup)}
              >
                <div
                  data-plasmic-name={"n00554A1"}
                  data-plasmic-override={overrides.n00554A1}
                  className={classNames(projectcss.all, sty.n00554A1)}
                />
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__o4QT
                )}
              >
                {"emily\nnelson"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4Tje5
                )}
              >
                {"Miracle Conroy"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__esb9C
                )}
              >
                {"Santino Klein"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lWmJk
                )}
              >
                {"Tanner Schultz"}
              </div>

              {(
                hasVariant(globalVariants, "screen", "desktopOnly")
                  ? true
                  : true
              ) ? (
                <EnvelopeFillIcon
                  className={classNames(projectcss.all, sty.svg___4NgY4)}
                  role={"img"}
                />
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "desktopOnly")
                  ? true
                  : true
              ) ? (
                <EnvelopeFillIcon
                  className={classNames(projectcss.all, sty.svg__pnOq)}
                  role={"img"}
                />
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "desktopOnly")
                  ? true
                  : true
              ) ? (
                <EnvelopeFillIcon
                  className={classNames(projectcss.all, sty.svg__mSl7B)}
                  role={"img"}
                />
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "desktopOnly")
                  ? true
                  : true
              ) ? (
                <EnvelopeFillIcon
                  className={classNames(projectcss.all, sty.svg__u5BuF)}
                  role={"img"}
                />
              ) : null}

              <div
                data-plasmic-name={"pagination"}
                data-plasmic-override={overrides.pagination}
                className={classNames(projectcss.all, sty.pagination)}
              >
                <div
                  data-plasmic-name={"basePagination02Default01Default"}
                  data-plasmic-override={
                    overrides.basePagination02Default01Default
                  }
                  className={classNames(
                    projectcss.all,
                    sty.basePagination02Default01Default
                  )}
                >
                  <div
                    data-plasmic-name={"base"}
                    data-plasmic-override={overrides.base}
                    className={classNames(projectcss.all, sty.base)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"containter"}
                      data-plasmic-override={overrides.containter}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.containter)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : false
                      ) ? (
                        <LIconIcon
                          className={classNames(projectcss.all, sty.svg__oDxIp)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__v4E3
                        )}
                      >
                        {"Â«"}
                      </div>

                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : false
                      ) ? (
                        <LIconIcon
                          className={classNames(projectcss.all, sty.svg__qs9Tg)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </div>
                </div>

                <div
                  data-plasmic-name={"basePagination02Default01Default2"}
                  data-plasmic-override={
                    overrides.basePagination02Default01Default2
                  }
                  className={classNames(
                    projectcss.all,
                    sty.basePagination02Default01Default2
                  )}
                >
                  <div
                    data-plasmic-name={"base2"}
                    data-plasmic-override={overrides.base2}
                    className={classNames(projectcss.all, sty.base2)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"containter2"}
                      data-plasmic-override={overrides.containter2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.containter2)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : false
                      ) ? (
                        <LIconIcon
                          className={classNames(projectcss.all, sty.svg__lHk4P)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        data-plasmic-name={"text2"}
                        data-plasmic-override={overrides.text2}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text2
                        )}
                      >
                        {"1"}
                      </div>

                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : false
                      ) ? (
                        <LIconIcon
                          className={classNames(projectcss.all, sty.svg__a595F)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </div>
                </div>

                <div
                  data-plasmic-name={"basePagination02Default01Default3"}
                  data-plasmic-override={
                    overrides.basePagination02Default01Default3
                  }
                  className={classNames(
                    projectcss.all,
                    sty.basePagination02Default01Default3
                  )}
                >
                  <div
                    data-plasmic-name={"base3"}
                    data-plasmic-override={overrides.base3}
                    className={classNames(projectcss.all, sty.base3)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"containter3"}
                      data-plasmic-override={overrides.containter3}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.containter3)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : false
                      ) ? (
                        <LIconIcon
                          className={classNames(projectcss.all, sty.svg__rSjcb)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        data-plasmic-name={"text3"}
                        data-plasmic-override={overrides.text3}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text3
                        )}
                      >
                        {"2"}
                      </div>

                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : false
                      ) ? (
                        <LIconIcon
                          className={classNames(projectcss.all, sty.svg__hAlKq)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </div>
                </div>

                <div
                  data-plasmic-name={"basePagination02Default01Default4"}
                  data-plasmic-override={
                    overrides.basePagination02Default01Default4
                  }
                  className={classNames(
                    projectcss.all,
                    sty.basePagination02Default01Default4
                  )}
                >
                  <div
                    data-plasmic-name={"base4"}
                    data-plasmic-override={overrides.base4}
                    className={classNames(projectcss.all, sty.base4)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"containter4"}
                      data-plasmic-override={overrides.containter4}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.containter4)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : false
                      ) ? (
                        <LIconIcon
                          className={classNames(projectcss.all, sty.svg__cflIy)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        data-plasmic-name={"text4"}
                        data-plasmic-override={overrides.text4}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text4
                        )}
                      >
                        {"3"}
                      </div>

                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : false
                      ) ? (
                        <LIconIcon
                          className={classNames(projectcss.all, sty.svg__p9SC2)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </div>
                </div>

                <div
                  data-plasmic-name={"basePagination02Default01Default5"}
                  data-plasmic-override={
                    overrides.basePagination02Default01Default5
                  }
                  className={classNames(
                    projectcss.all,
                    sty.basePagination02Default01Default5
                  )}
                >
                  <div
                    data-plasmic-name={"base5"}
                    data-plasmic-override={overrides.base5}
                    className={classNames(projectcss.all, sty.base5)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"containter5"}
                      data-plasmic-override={overrides.containter5}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.containter5)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : false
                      ) ? (
                        <LIconIcon
                          className={classNames(projectcss.all, sty.svg___69Fa)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        data-plasmic-name={"text5"}
                        data-plasmic-override={overrides.text5}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text5
                        )}
                      >
                        {"Â»"}
                      </div>

                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : false
                      ) ? (
                        <LIconIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___8Emd1
                          )}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </div>
                </div>
              </div>
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "profiles",
    "rectangle39509",
    "rectangle39513",
    "rectangle39512",
    "maskGroup",
    "n00554A1",
    "pagination",
    "basePagination02Default01Default",
    "base",
    "containter",
    "basePagination02Default01Default2",
    "base2",
    "containter2",
    "text2",
    "basePagination02Default01Default3",
    "base3",
    "containter3",
    "text3",
    "basePagination02Default01Default4",
    "base4",
    "containter4",
    "text4",
    "basePagination02Default01Default5",
    "base5",
    "containter5",
    "text5"
  ],

  profiles: [
    "profiles",
    "rectangle39509",
    "rectangle39513",
    "rectangle39512",
    "maskGroup",
    "n00554A1",
    "pagination",
    "basePagination02Default01Default",
    "base",
    "containter",
    "basePagination02Default01Default2",
    "base2",
    "containter2",
    "text2",
    "basePagination02Default01Default3",
    "base3",
    "containter3",
    "text3",
    "basePagination02Default01Default4",
    "base4",
    "containter4",
    "text4",
    "basePagination02Default01Default5",
    "base5",
    "containter5",
    "text5"
  ],

  rectangle39509: ["rectangle39509"],
  rectangle39513: ["rectangle39513"],
  rectangle39512: ["rectangle39512"],
  maskGroup: ["maskGroup", "n00554A1"],
  n00554A1: ["n00554A1"],
  pagination: [
    "pagination",
    "basePagination02Default01Default",
    "base",
    "containter",
    "basePagination02Default01Default2",
    "base2",
    "containter2",
    "text2",
    "basePagination02Default01Default3",
    "base3",
    "containter3",
    "text3",
    "basePagination02Default01Default4",
    "base4",
    "containter4",
    "text4",
    "basePagination02Default01Default5",
    "base5",
    "containter5",
    "text5"
  ],

  basePagination02Default01Default: [
    "basePagination02Default01Default",
    "base",
    "containter"
  ],

  base: ["base", "containter"],
  containter: ["containter"],
  basePagination02Default01Default2: [
    "basePagination02Default01Default2",
    "base2",
    "containter2",
    "text2"
  ],

  base2: ["base2", "containter2", "text2"],
  containter2: ["containter2", "text2"],
  text2: ["text2"],
  basePagination02Default01Default3: [
    "basePagination02Default01Default3",
    "base3",
    "containter3",
    "text3"
  ],

  base3: ["base3", "containter3", "text3"],
  containter3: ["containter3", "text3"],
  text3: ["text3"],
  basePagination02Default01Default4: [
    "basePagination02Default01Default4",
    "base4",
    "containter4",
    "text4"
  ],

  base4: ["base4", "containter4", "text4"],
  containter4: ["containter4", "text4"],
  text4: ["text4"],
  basePagination02Default01Default5: [
    "basePagination02Default01Default5",
    "base5",
    "containter5",
    "text5"
  ],

  base5: ["base5", "containter5", "text5"],
  containter5: ["containter5", "text5"],
  text5: ["text5"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    profiles: makeNodeComponent("profiles"),
    rectangle39509: makeNodeComponent("rectangle39509"),
    rectangle39513: makeNodeComponent("rectangle39513"),
    rectangle39512: makeNodeComponent("rectangle39512"),
    maskGroup: makeNodeComponent("maskGroup"),
    n00554A1: makeNodeComponent("n00554A1"),
    pagination: makeNodeComponent("pagination"),
    basePagination02Default01Default: makeNodeComponent(
      "basePagination02Default01Default"
    ),

    base: makeNodeComponent("base"),
    containter: makeNodeComponent("containter"),
    basePagination02Default01Default2: makeNodeComponent(
      "basePagination02Default01Default2"
    ),

    base2: makeNodeComponent("base2"),
    containter2: makeNodeComponent("containter2"),
    text2: makeNodeComponent("text2"),
    basePagination02Default01Default3: makeNodeComponent(
      "basePagination02Default01Default3"
    ),

    base3: makeNodeComponent("base3"),
    containter3: makeNodeComponent("containter3"),
    text3: makeNodeComponent("text3"),
    basePagination02Default01Default4: makeNodeComponent(
      "basePagination02Default01Default4"
    ),

    base4: makeNodeComponent("base4"),
    containter4: makeNodeComponent("containter4"),
    text4: makeNodeComponent("text4"),
    basePagination02Default01Default5: makeNodeComponent(
      "basePagination02Default01Default5"
    ),

    base5: makeNodeComponent("base5"),
    containter5: makeNodeComponent("containter5"),
    text5: makeNodeComponent("text5"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
